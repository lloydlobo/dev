# file: .zsh_profile
#
# $ DEV_ENV=~/Personal/dev ./dev-env.sh
# $ DEV_ENV=~/Personal/dev ./dev-env.sh --dry
# $ exec zsh # to source ~/.zshrc immediately
#
# Sources:
#   - https://github.com/ThePrimeagen/dev/blob/master/env/.zsh_profile

# $ rg TODO
# $ rg FIXME | fzf

export XDG_CONFIG_HOME=$HOME/.config
export GTK_THEME=Adwaita:dark nautilus
# See https://forum.manjaro.org/t/nautilus-does-not-switch-to-dark-mode/132095/2
gsettings set org.gnome.desktop.interface color-scheme prefer-dark
# exec_always --no-startup-id exec export LANG=en_US.UTF-8

# export MANPATH="/usr/local/man:$MANPATH"
# export LANG=en_US.UTF-8  # you may need to manually set your language environment

PERSONAL=$XDG_CONFIG_HOME/Personal
VIM=nvim
#DEV_ENV=$HOME/dev	 			# Note: "dev" is at $HOME/Personal/dev; so move it to $HOME?

# =============================================================================
# Source (`-L`     Follow symbolic links) in $PERSONAL
if false; then
	for i in `find -L $PERSONAL`; do
		echo "$i"; # HACK: TEMPORARY: => /home/user/.config/Personal
		# source "$i"; # Note: unimplemented
	done
fi

# =============================================================================
# MISE-EN-PLACE: for node
# =============================================================================
eval "$(mise activate zsh)"
# 1. mise is not activated, run mise help activate or
#    read documentation at https://mise.jdx.dev for activation instructions.
#    Alternatively, add the shims directory ~/.local/share/mise/shims to PATH.
#    Using the shims directory is preferred for non-interactive setups.

# =============================================================================
# uv: Python package and project manager
# =============================================================================
eval "$(uv generate-shell-completion zsh)"
eval "$(uvx --generate-shell-completion zsh)"

# =============================================================================
# Homebrew
# =============================================================================
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# =============================================================================
# direnv (See https://direnv.net/docs/hook.html)
# =============================================================================
eval "$(direnv hook zsh)"

# =============================================================================
# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# =============================================================================
# Exports env variables
export DEV_ENV_HOME="$HOME/Personal/dev"
export GIT_EDITOR=$VIM

# $ echo $PATH | tr ':' '\n'

#export GOPATH=$HOME/.local/go # (unimplemented)
export GOROOT=/usr/local/go
export PATH=$GOROOT/bin:$PATH
export PATH=$HOME/go/bin:$PATH

export DOTNET_CLI_TELEMETRY_OPTOUT=true # opt-out of telemetry (.NET tools collects usage data)
export DOTNET_ROOT="$HOME/.dotnet" # .NET SDK (installed via dotnet-install.sh)
export PATH=$DOTNET_ROOT:$PATH
export PATH=$DOTNET_ROOT/tools:$PATH

# For Zed binary installed via `curl -f https://zed.dev/install.sh | sh`
export PATH=$HOME/.local/bin:$PATH

# =============================================================================
# Bindings

# fzf: default mappings
#   <COMMAND> ^t
#   <COMMAND> ** (<TAB>)
#   Ctrl+R: fuzzy search through your history
#   Alt+C: lets you jump through folders

bindkey -s '^E' 'vim $(fzf)\n'  # (vim **) source: https://github.com/yobibyte/yobitools/blob/main/dotfiles/.zshrc
bindkey -s ^f "tmux-sessionizer.sh\n" # requires scripts to be in PATH (see ./xprofile)
bindkey -s ^x 'fzfclip\n'  # source: https://github.com/yobibyte/yobitools/blob/main/dotfiles/.zshrc

# =============================================================================
# Rust btw
. "$HOME/.cargo/env"

# =============================================================================
# Helpers

if false; then
    # - - - - - - - - - - - - - - - - - - - -
    # Custom Ctrl-L behavior
    # - - - - - - - - - - - - - - - - - - - -
    bottom_clear_screen() { # source: https://github.com/romkatv/powerlevel10k/issues/563#issuecomment-1742316976
        local lines
        lines=$(tput lines) || lines=$LINES  # get current terminal height
        tput -x clear                        # clear screen properly (retains scrollback history)
        printf '\n%.0s' {1..$lines}          # print enough newlines to reach bottom
    } # WARNING: bottom_clear_screen:zle:5: widgets can only be called when ZLE is active
    bottom_clear_screen_reset_prompt() { # source: https://github.com/romkatv/powerlevel10k/issues/563#issuecomment-1742316976
        bottom_clear_screen
        zle reset-prompt                     # redraw prompt correctly
    }
    zle -N bottom_clear_screen_reset_prompt
    bindkey '^L' bottom_clear_screen_reset_prompt # source: https://unix.stackexchange.com/a/674837 ( Ctrl+l is a keybinding to readline's clear-screen command (man 3 readline).)
    alias c='bottom_clear_screen'
    alias clear='bottom_clear_screen'
fi

# =============================================================================
# Aliases

archive() { mv --interactive --verbose $1 $HOME/archive/2025 } # source: https://github.com/yobibyte/yobitools/blob/main/dotfiles/.zshrc
alias b='w3m $(xsel -b -o)' # 'w3m $(xsel -b -o)' # copied from yobibyte
alias c='tput -x clear'
alias d='w3m duckduckgo.com' # 'w3m $(xsel -b -o)' # copied from yobibyte
alias fd='rg --files | grep '  # $ fd myfile # source: https://github.com/yobibyte/yobitools/blob/main/dotfiles/.zshrc
alias gs='git status --short --branch'
alias httpserver='python3 -m http.server 8000'
alias l='eza -lT' # $ l | sponge | column
alias lg='lazygit'
alias ls='ls --color' # FIXME: Only run this when in interactive shell (avoid ansi escape sequence from all the coloring)
alias vim-kickstart='NVIM_APPNAME="nvim-kickstart" nvim'
alias vim='nvim'
alias vimog='vim.tiny'
alias wtr='curl -Ss wttr.in | head -n -1'

# =============================================================================
# Cat Funcs
catr () {
	tail -n "+$1" $3 | head -n "$( ( $2 - $1 + 1 ) )"
}

cat1Line() {
	cat $1 | tr -d "\n"
}

# =============================================================================
# Path Funcs
addToPath() {
	if [[ "$PATH" != *"$1"* ]]; then
		export PATH=$PATH:$1
	fi
}

addToPathFront() {
	if [[ "$PATH" != *"$1"* ]]; then
		export PATH=$1:$PATH
	fi
}

# addToPathFront $HOME/.local/.npm-global/bin/
# addToPathFront $HOME/.local/apps/
# addToPathFront $HOME/.local/bin/
# addToPathFront $HOME/.local/n/bin/
# addToPathFront $HOME/.local/npm/bin/
# addToPathFront $HOME/.local/odin
# addToPathFront $HOME/.zig
addToPathFront $HOME/.local/scripts/

# addToPath $HOME/.local/Personal/
# addToPath $HOME/Personal/ghostty/zig-out/bin/
# addToPathFront $HOME/.deno/bin/
# addToPathFront $HOME/.local/go/bin # is this necessary
# addToPathFront $HOME/Personal/sumneko/bin/
addToPath $HOME/.cargo/bin/
addToPathFront /usr/local/go/bin/

