#!/usr/bin/env bash
# Ref: https://youtu.be/fpn3ev9hY_4?si=dWDR03jPnxcyJHZO&t=736 — Sylvan Franklin
set -euo pipefail # exit on error, undefined vars, pipe failures

trap 'echo "[$(basename "$0"):$LINENO] Error occurred" >&2; exit 1' ERR

# === Config ===
readonly LOG_FILE="${HOME}/.tw.jsonl"
readonly LOG_ROTATED="${LOG_FILE}.old"
readonly MAX_LOG_LINES=5000 # before rotation
readonly CATEGORIES=(PROGRAMMING DSA WORKFLOW CHILL STORMY WASTED STOP) 
declare -Ar COLORS=([PROGRAMMING]=blue [DSA]=green [WORKFLOW]=cyan [CHILL]=red [STORMY]=yellow [WASTED]=white)  # -r for immutability

# === Helpers ===
die() { echo "[$(basename "$0"):$LINENO] $1" >&2; exit 1; }
get_timestamp() { date -u +%Y-%m-%dT%H:%M:%SZ; } # support for date: GNU {--utc, -u} vs macOS BSD {-u}
rotate_logs() {
    [[ -f "$LOG_FILE" ]] || return 0
    local lines
    lines=$(wc -l < "$LOG_FILE")
    if (( lines > MAX_LOG_LINES )); then
        mv "$LOG_FILE" "$LOG_ROTATED"
        touch "$LOG_FILE"
        echo "ℹ Rotated log (${lines} lines → ${LOG_ROTATED})" >&2
    fi
}
log_json() {
    printf '{"timestamp":"%s","action":"%s","category":"%s"}\n' \
        "$(get_timestamp)" "$1" "$2" >> "$LOG_FILE";
    rotate_logs
}
require_cmd() { command -v "$1" >/dev/null 2>&1 || die "Command '$1' not found."; }
set_tmux() { 
    [[ -v TMUX ]] && tmux set -g status-right "$1" 2>/dev/null || :
} # [[ -n "${TMUX:-}" ]] ### || : similar to || true

# === Setup ===
require_cmd fzf
require_cmd timew
[[ -v TMUX ]] && require_cmd tmux
mkdir -p "$(dirname "$LOG_FILE")" && touch "$LOG_FILE"

# === Select category ===
selected="${1:-}" # allow CLI argument
if [[ -z "$selected" ]]; then
    set +e  #   temporarily disable exit-on-error for fzf (which can be cancelled)
    selected=$(printf "%s\n" "${CATEGORIES[@]}" | fzf --prompt="Select category: " --height=40% --border --ansi --reverse) || exit 0
    set -e  #   re-enable exit-on-error
fi
[[ -z "$selected" ]] && exit 0
[[ ! " ${CATEGORIES[*]} " =~ " $selected " ]] && die "Invalid category: $selected"

# === Stop previous timer ===
timew stop &>/dev/null || echo "⚠ No active timer to stop."

# === Handle STOP mode ===
if [[ "$selected" == "STOP" ]]; then
    set_tmux ""
    log_json STOP "$selected"
    echo "⊙ Stopped tracking."
    exit 0
fi

# === Start new timer ===
timew start "$selected" >/dev/null 2>&1 || die "Failed to start timer for $selected"
set_tmux "#[fg=${COLORS[$selected]:-default},bold]$selected#[default]"
log_json START "$selected"
echo "⏱ Tracking: $selected"

# TODO: Log file rotation to avoid unbounded growth.
#           For ~/.tw.jsonl:
#           1. Add to logrotate (create /etc/logrotate.d/tw):
#               bash/home/*/.tw.jsonl {
#                   weekly
#                   rotate 12
#                   compress
#                   missingok
#                   notifempty
#               }
#           2. DIY rotation in your script:
#               bashrotate_log() {
#                   local max_size=$((10 * 1024 * 1024))  # 10MB
#                   [[ -f "$LOG_FILE" ]] && [[ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE") -gt $max_size ]] && {
#                       mv "$LOG_FILE" "${LOG_FILE}.$(date +%Y%m%d)"
#                       gzip "${LOG_FILE}.$(date +%Y%m%d)"
#                   }
#               }

# vim:filetype=zsh:
# vim:tw=78:ts=4:sw=4:et:ft=help:norl:
