#!/usr/bin/env bash

# Stop script on NZEC
set -e
# Stop script if unbound variable found (use ${var:-} if intentional)
set -u
# By default cmd1 | cmd2 returns exit code of cmd2 regardless of cmd1 success
# This is causing it to fail
set -o pipefail

if true; then
    if true; then
        command -v gpg >/dev/null 2>&1 || sudo apt install -y gpg

        wget https://dot.net/v1/dotnet-install.asc  # import Microsoft's public key (one-time operation)
        gpg --import dotnet-install.asc

        wget https://dot.net/v1/dotnet-install.sh # download script and signature
        wget https://dot.net/v1/dotnet-install.sig
            
        if gpg --verify dotnet-install.sig dotnet-install.sh; then
            echo "✓ Signature verified!"
            bash dotnet-install.sh --channel LTS --install-dir "$HOME/.dotnet"
        else
            echo "✗ Signature verification failed!"
            exit 1
        fi
    else
        curl https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel LTS --install-dir "$HOME/.dotnet"

        if true; then
            # Add to PATH for current session
            export DOTNET_ROOT="$HOME/.dotnet"
            export PATH="$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools"
        else
            # Make it permanent (choose your shell)
            echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
            echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc

            echo "✓ .NET installed successfully!"
            echo "Run 'source ~/.bashrc' or restart your terminal to update PATH"
        fi
    fi
elif true; then
    # Check Ubuntu version
    ubuntu_version=$(lsb_release -rs)

    if [[ "$ubuntu_version" == "20.04" ]]; then
        # For Ubuntu 20.04 - use Microsoft repository
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        rm packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-8.0
    else
        # For Ubuntu 22.04+ - use Ubuntu backports (recommended)
        sudo add-apt-repository ppa:dotnet/backports -y
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-9.0
    fi
else
    # Download Microsoft package repository
    wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
    sudo dpkg -i packages-microsoft-prod.deb
    rm packages-microsoft-prod.deb

    # Install .NET SDK
    sudo apt update
    sudo apt install dotnet-sdk-8.0
fi

#
# Ref: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script
#
# ## Purpose
#
# The intended use of the scripts is for Continuous Integration (CI)
# scenarios, where:
# - The SDK needs to be installed without user interaction and without
#   admin rights.
# - The SDK installation doesn't need to persist across multiple CI runs.
#   The typical sequence of events:
#   - CI is triggered.
#   - CI installs the SDK using one of these scripts.
#   - CI finishes its work and clears temporary data including the SDK
#     installation.
#
# To set up a development environment or to run apps, use the installers
# rather than these scripts.
#
# ## Recommended version
#
# We recommend that you use the stable version of the scripts:
# - Bash (Linux/macOS): https://dot.net/v1/dotnet-install.sh
# - PowerShell (Windows): https://dot.net/v1/dotnet-install.ps1
#

# vim:filetype=bash:
# vim:tw=78:ts=4:sw=4:et:ft=help:norl:
